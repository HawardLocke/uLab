//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Lite_UIManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Lite.UIManager), typeof(Lite.Manager));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("GetWindow", GetWindow);
		L.RegFunction("RegisterWindow", RegisterWindow);
		L.RegFunction("OpenWindow", OpenWindow);
		L.RegFunction("CloseWindow", CloseWindow);
		L.RegFunction("SetMainWindow", SetMainWindow);
		L.RegFunction("BackToMainWindow", BackToMainWindow);
		L.RegFunction("Cleanup", Cleanup);
		L.RegFunction("New", _CreateLite_UIManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLite_UIManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Lite.UIManager obj = new Lite.UIManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Lite.UIManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Lite.UIManager obj = (Lite.UIManager)ToLua.CheckObject(L, 1, typeof(Lite.UIManager));
			obj.Initialize();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Lite.UIManager obj = (Lite.UIManager)ToLua.CheckObject(L, 1, typeof(Lite.UIManager));
			obj.Destroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lite.UIManager obj = (Lite.UIManager)ToLua.CheckObject(L, 1, typeof(Lite.UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			Lite.ui.IWindow o = obj.GetWindow(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			Lite.UIManager.RegisterWindow(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Lite.UIManager), typeof(string)))
			{
				Lite.UIManager obj = (Lite.UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Lite.ui.IWindow o = obj.OpenWindow(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Lite.UIManager), typeof(Lite.ui.WindowInfo), typeof(Lite.ui.IContext)))
			{
				Lite.UIManager obj = (Lite.UIManager)ToLua.ToObject(L, 1);
				Lite.ui.WindowInfo arg0 = (Lite.ui.WindowInfo)ToLua.ToObject(L, 2);
				Lite.ui.IContext arg1 = (Lite.ui.IContext)ToLua.ToObject(L, 3);
				Lite.ui.IWindow o = obj.OpenWindow(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lite.UIManager.OpenWindow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Lite.UIManager), typeof(Lite.ui.IWindow)))
			{
				Lite.UIManager obj = (Lite.UIManager)ToLua.ToObject(L, 1);
				Lite.ui.IWindow arg0 = (Lite.ui.IWindow)ToLua.ToObject(L, 2);
				obj.CloseWindow(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Lite.UIManager), typeof(string)))
			{
				Lite.UIManager obj = (Lite.UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.CloseWindow(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lite.UIManager.CloseWindow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMainWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lite.UIManager obj = (Lite.UIManager)ToLua.CheckObject(L, 1, typeof(Lite.UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetMainWindow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BackToMainWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Lite.UIManager obj = (Lite.UIManager)ToLua.CheckObject(L, 1, typeof(Lite.UIManager));
			obj.BackToMainWindow();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Cleanup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Lite.UIManager obj = (Lite.UIManager)ToLua.CheckObject(L, 1, typeof(Lite.UIManager));
			obj.Cleanup();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

