//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Lite_ui_IWindowWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Lite.ui.IWindow), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("_Instantiate", _Instantiate);
		L.RegFunction("_Enter", _Enter);
		L.RegFunction("_Exit", _Exit);
		L.RegFunction("_Pause", _Pause);
		L.RegFunction("_Resume", _Resume);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("windowInfo", get_windowInfo, set_windowInfo);
		L.RegVar("PreviousWindowInfo", get_PreviousWindowInfo, set_PreviousWindowInfo);
		L.RegVar("IsActived", get_IsActived, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Instantiate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Lite.ui.IWindow obj = (Lite.ui.IWindow)ToLua.CheckObject(L, 1, typeof(Lite.ui.IWindow));
			obj._Instantiate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Enter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lite.ui.IWindow obj = (Lite.ui.IWindow)ToLua.CheckObject(L, 1, typeof(Lite.ui.IWindow));
			Lite.ui.IContext arg0 = (Lite.ui.IContext)ToLua.CheckObject(L, 2, typeof(Lite.ui.IContext));
			obj._Enter(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Exit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lite.ui.IWindow obj = (Lite.ui.IWindow)ToLua.CheckObject(L, 1, typeof(Lite.ui.IWindow));
			Lite.ui.IContext arg0 = (Lite.ui.IContext)ToLua.CheckObject(L, 2, typeof(Lite.ui.IContext));
			obj._Exit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lite.ui.IWindow obj = (Lite.ui.IWindow)ToLua.CheckObject(L, 1, typeof(Lite.ui.IWindow));
			Lite.ui.IContext arg0 = (Lite.ui.IContext)ToLua.CheckObject(L, 2, typeof(Lite.ui.IContext));
			obj._Pause(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Resume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lite.ui.IWindow obj = (Lite.ui.IWindow)ToLua.CheckObject(L, 1, typeof(Lite.ui.IWindow));
			Lite.ui.IContext arg0 = (Lite.ui.IContext)ToLua.CheckObject(L, 2, typeof(Lite.ui.IContext));
			obj._Resume(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_windowInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lite.ui.IWindow obj = (Lite.ui.IWindow)o;
			Lite.ui.WindowInfo ret = obj.windowInfo;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index windowInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PreviousWindowInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lite.ui.IWindow obj = (Lite.ui.IWindow)o;
			Lite.ui.WindowInfo ret = obj.PreviousWindowInfo;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PreviousWindowInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsActived(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lite.ui.IWindow obj = (Lite.ui.IWindow)o;
			bool ret = obj.IsActived;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsActived on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_windowInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lite.ui.IWindow obj = (Lite.ui.IWindow)o;
			Lite.ui.WindowInfo arg0 = (Lite.ui.WindowInfo)ToLua.CheckObject(L, 2, typeof(Lite.ui.WindowInfo));
			obj.windowInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index windowInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PreviousWindowInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lite.ui.IWindow obj = (Lite.ui.IWindow)o;
			Lite.ui.WindowInfo arg0 = (Lite.ui.WindowInfo)ToLua.CheckObject(L, 2, typeof(Lite.ui.WindowInfo));
			obj.PreviousWindowInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PreviousWindowInfo on a nil value" : e.Message);
		}
	}
}

